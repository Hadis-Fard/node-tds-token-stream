/* @flow */

const assert = require('chai').assert;
const Writer = require('../../src').Writer;
const Reader = require('../../src').Reader;
const InfoToken = require('../../src/tokens/info');

describe('Writing an `INFO` token', function() {
  let writer;

  beforeEach(function() {
    writer = new Writer(0x07000000);
  });

  it('should convert the token correctly', function(done) {
    const token = new InfoToken();
    token.number = 5701;
    token.state = 2;
    token.message = "Changed database context to 'master'.";

    const chunks = [];

    writer.on('error', done);

    writer.on('data', function(chunk) {
      chunks.push(chunk);
    });

    writer.on('end', function() {
      const result = Buffer.concat(chunks);

      assert.lengthOf(result, 89);
      assert.deepEqual(result, Buffer.from([
        // TokenType
        0xab,

        // Length
        0x58, 0x00,

        // Number
        0x45, 0x16, 0x00, 0x00,

        // State
        0x02,

        // Class
        0x00,

        // MsgText
        0x25, 0x00,
        0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00,
        0x64, 0x00, 0x61, 0x00, 0x74, 0x00, 0x61, 0x00, 0x62, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00,
        0x20, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00,
        0x20, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x27, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x73, 0x00,
        0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x27, 0x00, 0x2E, 0x00,

        // ServerName
        0x00,

        // ProcName
        0x00,

        // LineNumber
        0x00, 0x00
      ]));

      done();
    });

    writer.end(token);
  });
});

describe('Reading an `INFO` token', function() {
  let reader;

  beforeEach(function() {
    reader = new Reader(0x07000000);
  });

  it('should parse the token correctly', function(done) {
    const buffer = Buffer.from([
      // TokenType
      0xab,

      // Length
      0x58, 0x00,

      // Number
      0x45, 0x16, 0x00, 0x00,

      // State
      0x02,

      // Class
      0x00,

      // MsgText
      0x25, 0x00,
      0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00,
      0x64, 0x00, 0x61, 0x00, 0x74, 0x00, 0x61, 0x00, 0x62, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00,
      0x20, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00,
      0x20, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x27, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x73, 0x00,
      0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x27, 0x00, 0x2E, 0x00,

      // ServerName
      0x00,

      // ProcName
      0x00,

      // LineNumber
      0x00, 0x00
    ]);

    const tokens = [];

    reader.on('data', function(token) {
      assert.instanceOf(token, InfoToken);
      tokens.push(token);
    });

    reader.on('error', done);

    reader.on('end', function() {
      assert.lengthOf(tokens, 1);

      const token: InfoToken = tokens[0];
      assert.strictEqual(5701, token.number);
      assert.strictEqual(2, token.state);
      assert.deepEqual("Changed database context to 'master'.", token.message);

      done();
    });

    reader.end(buffer);
  });
});
